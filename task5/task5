uart receiver module
module uart_rx(
    input clk,
    input rst,
    input rx,
    output reg [7:0] data_out,
    output reg data_valid
);
    parameter CLK_FREQ = 50000000;
    parameter BAUD_RATE = 9600;
    parameter CLKS_PER_BIT = CLK_FREQ / BAUD_RATE;

    reg [3:0] bit_index = 0;
    reg [15:0] clk_count = 0;
    reg [7:0] rx_shift = 0;
    reg rx_d1, rx_d2;
    reg receiving = 0;

    always @(posedge clk) begin
        rx_d1 <= rx;
        rx_d2 <= rx_d1;
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            bit_index <= 0;
            clk_count <= 0;
            receiving <= 0;
            data_out <= 8'd0;
            data_valid <= 0;
        end else begin
            data_valid <= 0;
            if (!receiving && !rx_d2) begin
                receiving <= 1;
                clk_count <= CLKS_PER_BIT / 2;
                bit_index <= 0;
            end else if (receiving) begin
                if (clk_count < CLKS_PER_BIT - 1)
                    clk_count <= clk_count + 1;
                else begin
                    clk_count <= 0;
                    if (bit_index < 8) begin
                        rx_shift[bit_index] <= rx_d2;
                        bit_index <= bit_index + 1;
                    end else begin
                        receiving <= 0;
                        data_out <= rx_shift;
                        data_valid <= 1;
                    end
                end
            end
        end
    end
endmodule

7 segment decoder
module seven_seg_decoder(
    input [3:0] nibble,
    output reg [6:0] seg
);
    always @(*) begin
        case(nibble)
            4'h0: seg = 7'b1000000;
            4'h1: seg = 7'b1111001;
            4'h2: seg = 7'b0100100;
            4'h3: seg = 7'b0110000;
            4'h4: seg = 7'b0011001;
            4'h5: seg = 7'b0010010;
            4'h6: seg = 7'b0000010;
            4'h7: seg = 7'b1111000;
            4'h8: seg = 7'b0000000;
            4'h9: seg = 7'b0010000;
            4'hA: seg = 7'b0001000;
            4'hB: seg = 7'b0000011;
            4'hC: seg = 7'b1000110;
            4'hD: seg = 7'b0100001;
            4'hE: seg = 7'b0000110;
            4'hF: seg = 7'b0001110;
            default: seg = 7'b1111111;
        endcase
    end
endmodule

top module
module top_uart_display(
    input clk,
    input rst,
    input rx,
    output [6:0] seg,
    output [3:0] an
);
    wire [7:0] uart_data;
    wire data_valid;
    reg [3:0] digit = 0;
    reg [1:0] sel = 0;

    uart_rx uart (
        .clk(clk),
        .rst(rst),
        .rx(rx),
        .data_out(uart_data),
        .data_valid(data_valid)
    );

    seven_seg_decoder decoder (
        .nibble(digit),
        .seg(seg)
    );

    assign an = 4'b1110; // Enable only one digit (for simplicity)

    always @(posedge clk or posedge rst) begin
        if (rst)
            digit <= 0;
        else if (data_valid)
            digit <= uart_data[3:0]; // Show lower nibble
    end
endmodule
